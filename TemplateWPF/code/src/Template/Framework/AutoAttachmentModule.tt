<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".cs" #>
<# 
  string ns = this.Host.ResolveParameterValue("", "", "namespace");
#>
using System.Linq;
using Autofac;
using Autofac.Core;

namespace <#= ns #>.Framework
{
    interface IAttachment
    {
        void AttachTo(object obj);
    }

    abstract class Attachment<T> : IAttachment
    {
        protected T viewModel;

        protected abstract void OnAttach();

        void IAttachment.AttachTo(object obj)
        {
            viewModel = (T)obj;
            OnAttach();
        }
    }

    class AutoAttachmentModule : Module
    {
        protected override void AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)
        {
            registration.Activating += Activating;
        }

        void Activating(object sender, ActivatingEventArgs<object> e)
        {
            var vmType = e.Instance.GetType();

            if (!vmType.Name.EndsWith("ViewModel"))
                return;

            var baseName = Conventions.GetRootName(vmType);

            var attachments = vmType.Assembly.GetTypes()
                .Where(t => t.Namespace == vmType.Namespace && t.Name.StartsWith(baseName) && t.Name.EndsWith("Attachment") && e.Context.IsRegistered(t))
                .Select(t => (IAttachment)e.Context.Resolve(t));

            foreach (var a in attachments)
                a.AttachTo(e.Instance);
        }
    }
}
